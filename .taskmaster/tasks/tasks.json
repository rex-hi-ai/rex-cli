{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Foundation: CLI Structure and File System Management",
        "description": "Build the foundational CLI architecture for `rex-cli`. This includes setting up a modular, extensible, and cross-platform structure using Node.js and Commander.js, implementing a File System Manager for `~/.rex` and `./.rex` directories, and creating the `rex-cli init` command.",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "- **CLI Architecture:** Build a modular and extensible CLI using Node.js and Commander.js. Ensure a clear command structure and comprehensive `--help` documentation.\n- **File System Manager:** Responsible for creating, validating, and managing permissions for the global `~/.rex` and project-local `./.rex` directories. Use `fs-extra` for robust cross-platform support (macOS, Linux, Windows) and provide clear error feedback.\n- **`init` Command:** The `rex-cli init` command must initialize a project by creating `./.rex/config.json` and provide a clear confirmation message.\n- **Extensibility:** The architecture must be designed with extension points for future components like the Prompt Manager, Utility Runner, and Configuration Manager.\n- **Testing:** Adhere to the project's technical architecture and ensure comprehensive test coverage for stability and maintainability.",
        "testStrategy": "Implement comprehensive unit and integration tests to ensure stability and maintainability. **Unit Tests:** Cover the File System Manager, focusing on directory creation, permission handling, and error scenarios across platforms. **Integration Tests:** Verify the end-to-end flow of the `rex-cli init` command, ensuring it correctly creates the project configuration and provides user feedback.",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize CLI Project Structure",
            "description": "Set up the Node.js project and integrate Commander.js. Establish the main entry point and a clear command structure.",
            "dependencies": [],
            "details": "Create the project directory, initialize package.json, install Commander.js, and set up the CLI entry file (e.g., index.js or cli.js). Ensure the CLI can parse commands and display --help.",
            "status": "done",
            "testStrategy": "Verify the CLI runs, displays help, and recognizes basic commands on all supported platforms."
          },
          {
            "id": 2,
            "title": "Implement File System Manager",
            "description": "Design and implement a module to manage ~/.rex and ./.rex directories and files, including creation, validation, and permission handling.",
            "dependencies": [
              1
            ],
            "details": "Use fs-extra for robust cross-platform support. The manager should create directories if missing, check permissions, and handle errors gracefully. All file operations must provide clear user feedback.\n<info added on 2025-07-17T08:27:57.717Z>\nBased on the research, the implementation should adhere to the following principles:\n\n- **Path Management:** Utilize Node.js's `path` module (e.g., `path.join`, `path.resolve`) for cross-platform path construction and `os.homedir()` to reliably locate the user's home directory for `~/.rex`.\n- **Idempotency:** Leverage `fs-extra`'s `ensureDir` to prevent errors when re-initializing directories that already exist.\n- **Atomic Writes:** For critical file updates (e.g., configuration, metadata), write to a temporary file first and then rename it to the final destination. This prevents file corruption if the process is interrupted.\n- **Error Handling:** Implement custom, specific error classes (e.g., `PermissionError`) that include the problematic path and a clear message. The `FileSystemManager` should throw these errors, allowing the CLI command layer to catch them and display user-friendly feedback.\n- **Testing Strategy:**\n  - **Unit Tests:** Use Jest and mock `fs-extra` to test the `FileSystemManager`'s logic for various success and failure scenarios (e.g., permissions, existing files).\n  - **Integration Tests:** Use a library like `tempy` to create temporary directories to test the actual CLI commands' effects on the file system.\n</info added on 2025-07-17T08:27:57.717Z>",
            "status": "done",
            "testStrategy": "Unit test directory creation, permission errors, and error handling on macOS, Linux, and Windows."
          },
          {
            "id": 3,
            "title": "Implement rex-cli init Command",
            "description": "Develop the init command to initialize a project by creating ./.rex/config.json with default content.",
            "dependencies": [
              2
            ],
            "details": "The command should check for existing ./.rex/config.json, prompt or overwrite as needed, and provide a clear confirmation message. Handle errors such as permission denied or invalid path.",
            "status": "done",
            "testStrategy": "Integration test: run init in a new directory, verify ./.rex/config.json is created, and test error scenarios."
          },
          {
            "id": 4,
            "title": "Design Extensible Architecture",
            "description": "Refactor and document the codebase to allow easy integration of future components (Prompt Manager, Utility Runner, Configuration Manager).",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Use modular design patterns and clear interfaces. Add comments and documentation to highlight extension points.",
            "status": "done",
            "testStrategy": "Code review and static analysis to ensure modularity and extensibility."
          },
          {
            "id": 5,
            "title": "Testing and Documentation",
            "description": "Write unit and integration tests for all modules. Ensure CLI --help and user documentation are clear and complete.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Use a test framework (e.g., Jest or Mocha) to cover all file system and CLI logic. Update README and in-CLI help text.",
            "status": "done",
            "testStrategy": "Run tests on all supported platforms. Review documentation for completeness and clarity."
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement Core Prompt Management (import, list)",
        "description": "Develop the `rex-cli prompt import <path>` command to copy a prompt file into the global library at `~/.rex/prompts/`. Also, implement the `rex-cli prompt list` command to display the prompts currently in the library.",
        "details": "The `import` command is the primary way to add data to the system. The `list` command provides essential visibility for the user. This task focuses on the 'Prompt Manager' component and is the first step in the 'Librarian' user flow.",
        "testStrategy": "Test `import` with various file paths and names. Test `list` to ensure it accurately reflects the contents of the `~/.rex/prompts/` directory. Test edge cases like importing a file that already exists.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Develop Initial Utility and Compilation Logic",
        "description": "Create the 'Utility Runner' component and a simple 'pass-through' Utility. Implement the `rex-cli utility compile` command to run prompts from the library through the Utility and save the output to `~/.rex/compiled/`.",
        "details": "This task proves the core concept of transforming prompts. The pass-through utility will simply copy the prompt content, serving as a baseline for future, more complex utilities. The focus is on the mechanism, not the transformation itself.",
        "testStrategy": "Unit test the Utility Runner to ensure it discovers and executes the pass-through utility. Integration test the `compile` command to verify that after running, the correct files appear in the `~/.rex/compiled/passthrough/` directory.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement Core Deployment Workflow (`deploy` command)",
        "description": "Create the `rex-cli deploy <prompt-name>` command. This command should copy a specified compiled prompt from `~/.rex/compiled/` into the current project's directory. This completes the MVP user flow.",
        "details": "This is the final step of the core user journey, making the managed prompts usable in a project. The initial version should support specifying the utility and output path via flags (`--utility`, `--output`).",
        "testStrategy": "Integration test the `deploy` command. Run `import`, then `compile`, then `deploy` and verify the final prompt file is in the correct location in the project directory with the correct content.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Expand Prompt Management Commands",
        "description": "Enhance the 'Prompt Manager' by implementing the `remove`, `rename`, and `export` subcommands for prompts. Ensure destructive operations like `remove` require a `--force` flag for safety.",
        "details": "These commands provide a complete lifecycle management experience for prompts in the global library, improving usability beyond the MVP. `export` allows users to get prompts out of the library, while `rename` and `remove` are essential maintenance tools.",
        "testStrategy": "Write individual tests for `rename`, `remove` (with and without `--force`), and `export`. Verify that the file system state in `~/.rex/prompts/` is correct after each operation.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implement Multi-Level Configuration System",
        "description": "Build the 'Configuration Manager' to load and merge settings from global (`~/.rex/config.json`), project (`./.rex/config.json`), and command-line flags, following the specified hierarchy.",
        "details": "This system provides flexibility for users. The hierarchy is: CLI flags > project settings > global settings. This manager will be used by other commands (like `deploy`) to determine behavior.",
        "testStrategy": "Unit test the Configuration Manager with various combinations of global, project, and CLI configs to ensure the correct settings are prioritized and merged.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Smart Detection and Caching",
        "description": "Implement the smart detection feature to automatically identify relevant Utilities by scanning project files (e.g., `.vscode/`). Implement the caching system (`hashes.json`, `detection.json`) to improve performance by avoiding redundant compilations and scans.",
        "details": "This is a major V2 enhancement. The 'Cache Manager' will store file hashes to enable incremental builds. Smart detection will make the `deploy` command work 'out of the box' in many cases, improving the user experience significantly.",
        "testStrategy": "Test smart detection in mock project structures containing `.vscode` or `.cursor` directories. Test caching by running `compile` twice on the same files and verifying the second run is faster and skips compilation.",
        "priority": "medium",
        "dependencies": [
          4,
          6
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Enhance Developer Experience (watch, preview, dry-run)",
        "description": "Add flags to improve the development workflow and safety. Implement `--watch` for the `compile` command for real-time feedback. Implement `--preview` and `--dry-run` for the `deploy` command to allow users to see changes before they are written to disk.",
        "details": "These features are part of the V2 'Developer Experience' goals. `--watch` is for prompt authors, while `--dry-run` and `--preview` are for prompt consumers, making the tool safer and more interactive.",
        "testStrategy": "Test `--dry-run` to ensure no files are written. Test `--preview` to verify it outputs the expected changes. Test `--watch` by modifying a source prompt file and ensuring the compile process re-triggers automatically.",
        "priority": "low",
        "dependencies": [
          3,
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Develop Official Utilities for VS Code and Cursor",
        "description": "Research the prompt formats for VS Code and Cursor and develop two official, pluggable Utilities. This will validate the Utility architecture and provide immediate value to users of these popular tools.",
        "details": "As per the 'Risks and Mitigations' section, building two distinct utilities will help refine the core integration logic. This involves understanding how each tool stores its prompts (e.g., in a JSON file, specific directory structure) and writing the conversion logic.",
        "testStrategy": "For each utility, create an end-to-end test: import a standard Markdown prompt, compile it using the new utility, deploy it to a mock project, and verify the output file format and location are correct for the target tool (VS Code/Cursor).",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Advanced Utility Management, Testing, and Logging",
        "description": "Flesh out the V3 features: implement `rex-cli utility enable|disable|set` commands, add a comprehensive test suite using Jest, and implement a logging system with different levels (`--log-level`).",
        "details": "This task focuses on robustness and extensibility. Utility management commands make the system more configurable. Comprehensive testing ensures stability. Logging aids in debugging for both users and developers.",
        "testStrategy": "Add unit and integration tests to cover all commands and edge cases, aiming for high code coverage. Test the `utility` subcommands to ensure they correctly modify the configuration. Test the logging output at different levels.",
        "priority": "low",
        "dependencies": [
          6,
          9
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Implement Prompt Search Functionality",
        "description": "Develop the `rex-cli prompt search` command to allow users to find prompts by name or content, supporting regular expressions and case-sensitive matching.",
        "details": "Implement the `rex-cli prompt search` subcommand using Commander.js. This command should accept a `<query>` argument and support two optional flags: `--regex` (`-r`) to interpret the query as a regular expression, and `--case-sensitive` (`-c`) to perform case-sensitive matching. The function will access the global prompt library directory (`~/.rex/prompts/`) using the File System Manager. For each prompt file, its name and content will be read. The search logic will apply the specified query (as a string or regex) and case sensitivity to both the prompt's filename and its full content. Matching prompts will be collected and presented in a formatted output, clearly indicating the prompt name and potentially a snippet of the matching content.",
        "testStrategy": "Create a comprehensive set of mock prompt files with diverse names and content for testing. Test `rex-cli prompt search <query>` with various string queries, verifying correct case-insensitive matching in both prompt names and content. Test `rex-cli prompt search <query> -c` to ensure accurate case-sensitive matching. Validate `rex-cli prompt search <query> -r` for correct regular expression interpretation and matching. Combine flags, e.g., `rex-cli prompt search <query> -r -c`, to test case-sensitive regex. Include tests for scenarios with no matches, single matches, and multiple matches. Verify that the output format is consistent, user-friendly, and accurately displays the names of matching prompts.",
        "status": "done",
        "dependencies": [
          1,
          2
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Implement rex-cli config Command",
        "description": "Develop the `rex-cli config` command to enable users to view, set, and delete configuration items at both global and project levels.",
        "details": "This task involves creating the `rex-cli config` command with subcommands for managing configuration settings. It should support:\n- `rex-cli config get [key]`: To retrieve the value of a specific configuration key, or all configurations if no key is provided. This should respect the configuration hierarchy (project over global).\n- `rex-cli config set <key> <value>`: To set a configuration key-value pair. By default, this should modify the project-level configuration (`./.rex/config.json`).\n- `rex-cli config delete <key>`: To remove a configuration key. By default, this should remove from the project-level configuration.\n- A `--global` (`-g`) flag should be implemented for `set` and `delete` subcommands to target the global configuration file (`~/.rex/config.json`) instead of the project one.\n- The implementation will leverage the Configuration Manager developed in Task 6 for reading, writing, and merging configurations, and the File System Manager from Task 1 for file operations. Commander.js will be used for command-line parsing.",
        "testStrategy": "Create comprehensive unit and integration tests for the `rex-cli config` command:\n- Test `rex-cli config get` for existing and non-existent keys at both project and global levels, verifying correct value retrieval and hierarchy application.\n- Test `rex-cli config set <key> <value>` for new and existing keys, ensuring values are correctly written to the respective `config.json` (project by default, global with `--global`). Verify data types are preserved where applicable.\n- Test `rex-cli config delete <key>` for existing and non-existent keys, ensuring keys are correctly removed from the respective `config.json`.\n- Test combinations of `set` and `get` to confirm persistence.\n- Test error handling for invalid inputs or file access issues.\n- Verify that the `config.json` files are correctly updated and malformed JSON is not produced.",
        "status": "done",
        "dependencies": [
          1,
          6
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Implement Tag/Category Filtering for Deploy and Configuration",
        "description": "Enhance the `deploy` command with tag and category filtering capabilities, and extend the configuration system to support default tags/categories and filtering rules.",
        "details": "This task involves a multi-faceted implementation to introduce tag and category support:\n\n1.  **CLI `deploy` command enhancements:**\n    *   Modify the `rex-cli deploy` command to accept new parameters: `--tags <tags...>`, `--category <category>`, and `--exclude-tags <tags...>`. These parameters should support multiple tags for `--tags` and `--exclude-tags`.\n    *   Update the `_resolveDeploymentOptions()` method to correctly parse and prioritize these new parameters, ensuring they can be combined with existing prompt name arguments.\n    *   Ensure that when `deploy` is run in `dry-run` mode, the output accurately reflects the set of prompts that would be deployed after applying all tag/category filters.\n\n2.  **Prompt Metadata Parsing (`PromptMetadataParser` module):**\n    *   Create a new, dedicated `PromptMetadataParser` module responsible for reading prompt files and extracting metadata from their YAML frontmatter.\n    *   It must support parsing `tags` (which can be an array of strings or a comma-separated string) and `category` (a single string).\n    *   Implement a caching mechanism within this module to store parsed metadata, improving performance by avoiding redundant file reads and parsing operations.\n\n3.  **Deployment Filtering Logic:**\n    *   Modify the `DeploymentManager.getCompiledFiles()` method to incorporate the new tag/category filtering logic.\n    *   This method should utilize the `PromptMetadataParser` to retrieve the `tags` and `category` for each prompt.\n    *   Apply the filtering rules based on the `--tags`, `--category`, and `--exclude-tags` parameters passed to the `deploy` command. The filtering should occur before the final list of compiled files is returned for deployment.\n\n4.  **Configuration System Extension:**\n    *   Extend the `ConfigurationManager` to support new configuration keys under the `deploy` namespace: `deploy.defaultTags` (an array of strings), `deploy.defaultCategory` (a string), and `deploy.filters` (a structure to define more complex filtering rules, if applicable, otherwise ensure the basic keys are supported).\n    *   Ensure these new configuration settings are correctly loaded, merged, and prioritized according to the existing configuration hierarchy (CLI flags > project settings > global settings).",
        "testStrategy": "A comprehensive test strategy will cover unit-level parsing and integration-level command execution:\n\n1.  **Unit Tests for `PromptMetadataParser`:**\n    *   Create mock prompt files with various YAML frontmatter configurations:\n        *   `tags` as an array (e.g., `tags: [\"tag1\", \"tag2\"]`).\n        *   `tags` as a comma-separated string (e.g., `tags: \"tag1, tag2\"`).\n        *   `tags` missing or empty.\n        *   `category` present (e.g., `category: \"instructions\"`).\n        *   `category` missing or empty.\n        *   Malformed YAML frontmatter to test error handling.\n    *   Verify that the parser correctly extracts `tags` (normalized to an array) and `category`.\n    *   Test the caching mechanism by calling the parser multiple times for the same file and asserting that subsequent calls retrieve cached data.\n\n2.  **Integration Tests for `deploy` command with filtering:**\n    *   Set up a test environment with a diverse set of compiled prompt files, each having distinct tags and categories defined in their source prompt frontmatter.\n    *   Test `rex-cli deploy --tags tag1` to confirm only prompts containing 'tag1' are selected.\n    *   Test `rex-cli deploy --category instructions` to confirm only prompts belonging to 'instructions' category are selected.\n    *   Test `rex-cli deploy --exclude-tags experimental` to confirm prompts with 'experimental' tag are excluded.\n    *   Test combinations of parameters: `rex-cli deploy --tags tag1 tag2 --category instructions`, `rex-cli deploy --tags tag1 --exclude-tags tag2`.\n    *   Test combining filtering with specific prompt names: `rex-cli deploy my-prompt --tags tag1`.\n    *   Run all filtering tests with the `--dry-run` flag and assert that the output accurately lists the prompts that *would* be deployed, without actually modifying the file system.\n\n3.  **Integration Tests for Configuration System:**\n    *   Use `rex-cli config set` to set `deploy.defaultTags` and `deploy.defaultCategory` at both global and project levels.\n    *   Run `rex-cli deploy` without explicit tag/category flags and verify that the default configurations are correctly applied for filtering.\n    *   Test that explicit CLI flags (e.g., `--tags`) correctly override any default configurations set via `rex-cli config`.\n    *   Verify that `deploy.filters` (if implemented beyond basic default tags/category) behaves as expected according to its defined structure.",
        "status": "done",
        "dependencies": [
          2,
          3,
          4,
          6
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement CLI `deploy` Filtering Parameters",
            "description": "Modify the `rex-cli deploy` command to accept new command-line parameters: `--tags <tags...>`, `--category <category>`, and `--exclude-tags <tags...>`. These parameters should support multiple tags for `--tags` and `--exclude-tags`.",
            "dependencies": [],
            "details": "Update the `_resolveDeploymentOptions()` method to correctly parse these new parameters from the command line.",
            "status": "done",
            "testStrategy": "Unit tests for `_resolveDeploymentOptions()` to ensure correct parsing of various combinations of tag/category parameters. Integration tests to verify `rex-cli deploy` accepts and processes these flags without errors."
          },
          {
            "id": 2,
            "title": "Develop Prompt Metadata Parser Module",
            "description": "Create a new, dedicated `PromptMetadataParser` module responsible for reading prompt files and extracting metadata from their YAML frontmatter. It must support parsing `tags` (which can be an array of strings or a comma-separated string) and `category` (a single string).",
            "dependencies": [],
            "details": "Implement a caching mechanism within this module to store parsed metadata, improving performance by avoiding redundant file reads and parsing operations.",
            "status": "done",
            "testStrategy": "Unit tests for `PromptMetadataParser` with mock prompt files containing various YAML frontmatter configurations (e.g., `tags` as array, `tags` as comma-separated string, missing tags/category, invalid YAML). Test caching effectiveness and correctness."
          },
          {
            "id": 3,
            "title": "Implement Core Deployment Filtering Logic",
            "description": "Modify the `DeploymentManager.getCompiledFiles()` method to incorporate the new tag/category filtering logic. This involves utilizing the `PromptMetadataParser` to retrieve the `tags` and `category` for each prompt and applying filtering rules based on the parameters passed to the `deploy` command.",
            "dependencies": [
              1,
              2
            ],
            "details": "The filtering should occur before the final list of compiled files is returned for deployment, based on `--tags`, `--category`, and `--exclude-tags` parameters.",
            "status": "done",
            "testStrategy": "Unit tests for `DeploymentManager.getCompiledFiles()` with mock prompt metadata and various filter combinations to ensure correct inclusion/exclusion of prompts based on CLI parameters."
          },
          {
            "id": 4,
            "title": "Extend Configuration for Default Deploy Filters",
            "description": "Extend the `ConfigurationManager` to support new configuration keys under the `deploy` namespace: `deploy.defaultTags` (an array of strings), `deploy.defaultCategory` (a string), and `deploy.filters` (a structure to define more complex filtering rules, if applicable).",
            "dependencies": [],
            "details": "Ensure these new configuration settings are correctly loaded, merged, and prioritized according to the existing configuration hierarchy (CLI flags > project settings > global settings). This subtask leverages the existing `ConfigurationManager` (Task 6).",
            "status": "done",
            "testStrategy": "Unit tests for `ConfigurationManager` to verify correct loading, merging, and prioritization of `deploy.defaultTags` and `deploy.defaultCategory` from global, project, and CLI sources."
          },
          {
            "id": 5,
            "title": "Integrate Filters and Validate Dry-Run Output",
            "description": "Finalize the integration of CLI parameters and configuration defaults for tag/category filtering, ensuring correct prioritization. Validate that when `deploy` is run in `dry-run` mode, the output accurately reflects the set of prompts that would be deployed after applying all tag/category filters.",
            "dependencies": [
              1,
              3,
              4
            ],
            "details": "Ensure `_resolveDeploymentOptions()` correctly prioritizes CLI flags over configuration defaults for filtering. Update `dry-run` output generation to reflect the filtered prompt list accurately.",
            "status": "done",
            "testStrategy": "Integration tests for `rex-cli deploy` in `dry-run` mode with various combinations of CLI flags and configuration settings to verify the final list of prompts is accurate and correctly filtered according to all rules and priorities."
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-17T07:22:52.727Z",
      "updated": "2025-07-23T07:06:44.660Z",
      "description": "Tasks for master context"
    }
  }
}